name: Build FujiNet-PC

on:
#   push:
#     branches: [ fujinet-pc ]
#   pull_request:
#     branches: [ fujinet-pc ]
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type'
        required: true
        type: choice
        options:
        - Debug
        - Release
        default: 'Debug'
      releaseBuild:
        description: 'Make a release build'
        type: boolean
        default: false
      doRelease:
        description: 'Create GitHub Release'
        type: boolean
        default: false
      releaseVersion:
        description: 'Release version, blank for auto'
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: ${{ github.event.inputs.buildType }}

jobs:
  build-prep:
    # prepare to build a release: create tag release-{version} pointing to head
    runs-on: ubuntu-latest
    name: Prepare for build
    steps:
#     - name: List inputs
#       run: |
#         echo 'buildType: ${{ github.event.inputs.buildType }}'
#         echo 'releaseBuild: ${{ github.event.inputs.releaseBuild }}'
#         echo 'releaseVersion: ${{ github.event.inputs.releaseVersion }}'
    - name: Not release build
      if: ${{ github.event.inputs.releaseBuild == 'false' }}
      run: |
        echo 'This build in not a release build.'
        echo 'Release tag will not be created.'
        echo 'However if release tag exists on HEAD, it will be used to make a release build.'
    - name: Prepeare for release build
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: |
        echo 'This build is release build.'
        echo 'New release tag will be created (or existing tag on HEAD will be used) to make a release build.'
    - name: 'ðŸ§° Checkout'
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      uses: actions/checkout@v3
    - name: Fetch tags
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: git fetch --prune --unshallow --tags
    - name: Prepare release tag
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: python build_version.py release:push ${{ github.event.inputs.releaseVersion }}

  build-target:
    needs: build-prep
    strategy:
      fail-fast: false
      matrix:
        name: [Ubuntu 22.04]
        target: [ubuntu-22.04-amd64]
        runner: [ubuntu-22.04]
        default-shell: [bash]
        include:
          - name: Ubuntu 18.04
            target: ubuntu-18.04-amd64
            runner: ubuntu-18.04
            default-shell: bash
          - name: macOS 10.15 Catalina
            target: macos-10.15
            runner: macos-10.15
            default-shell: bash
          - name: Windows
            target: windows-x64
            runner: windows-latest
            default-shell: msys2 {0}
    continue-on-error: true
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.default-shell }}

    steps:
    # Setup MSYS2 on Windows
    - name: '[Windows] Setup MSYS2'
      if: ${{ startsWith(matrix.target, 'windows') }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        update: true
        install: >-
          git
          base-devel
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
          libssp:p

    - name: About ${{ matrix.name }}
      run: |
        echo "Building for ${{ matrix.name }} (${{ matrix.target }}) on ${{ matrix.runner }}"
        uname -a

    - name: 'ðŸ§° Checkout'
      uses: actions/checkout@v3

    - name: Fetch tags
      run: git fetch --prune --unshallow --tags

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: 'ðŸš§ Build FujiNet-PC'
      run: cmake --build build

    - name: Prepare dist
      run: cmake --build build --target=dist

    # - name: Test run
    #   working-directory: build/dist
    #   run: ./fujinet -v

    # Windows runner is pre-installed with some openssl
    # dist target skippes libssl and libcrypto in /c/Windows/SYSTEM32/
    # add missing libs now
    - name: '[Windows] Update dist with OpenSSL from CLANG64'
      if: ${{ startsWith(matrix.target, 'windows') }}
      run: |
        cp -pv /clang64/bin/libssl-*-x64.dll build/dist
        cp -pv /clang64/bin/libcrypto-*-x64.dll build/dist

    - name: List dist
      working-directory: build/dist
      run: ls -la .

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: fujinet-pc_${{ matrix.target }}
        path: build/dist/**
        

