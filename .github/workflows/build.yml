name: Build FujiNet-PC

on:
#   push:
#     branches: [ fujinet-pc ]
#   pull_request:
#     branches: [ fujinet-pc ]
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type'
        required: true
        type: choice
        options:
        - Debug
        - Release
        default: 'Debug'
      releaseBuild:
        description: 'Release build'
        type: boolean
        default: false
      releaseVersion:
        description: 'Release version, blank for auto-generated version'
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: ${{ github.event.inputs.buildType }}

jobs:
  release-prep:
    # prepare to build a release: create tag release-{version} pointing to head
    runs-on: ubuntu-latest
    name: Prepare for release
    steps:
    - name: List inputs
      run: |
        echo 'buildType: ${{ github.event.inputs.buildType }}'
        echo 'releaseBuild: ${{ github.event.inputs.releaseBuild }}'
        echo 'releaseVersion: ${{ github.event.inputs.releaseVersion }}'
    - name: Create release tag
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: python build_version.py release ${{ github.event.inputs.releaseVersion }}

#   build-ubuntu-22:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-22.04
#     name: Ubuntu 22.04
#     needs: release-prep

#     steps:
#     - name: 'ðŸ§° Checkout'
#       uses: actions/checkout@v3

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: 'ðŸš§ Build FujiNet-PC'
#       run: cmake --build build

#     - name: 'Prepare dist'
#       run: cmake --build build --target=dist

#     - name: Upload build artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: fujinet-pc_ubuntu-22.04-amd64
#         path: build/dist/**
        
#   build-ubuntu-18:
#     runs-on: ubuntu-18.04
#     name: Ubuntu 18.04
#     needs: release-prep

#     steps:
#     - name: 'ðŸ§° Checkout'
#       uses: actions/checkout@v3

#     - name: Configure CMake
#       run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: 'ðŸš§ Build FujiNet-PC'
#       run: cmake --build build

#     - name: 'Prepare dist'
#       run: cmake --build build --target=dist

#     - name: Upload build artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: fujinet-pc_ubuntu-18.04-amd64
#         path: build/dist/**

#   build-macos-catalina:
#     runs-on: macos-10.15
#     name: macOS 10.15 Catalina
#     needs: release-prep

#     steps:
#     - name: 'ðŸ§° Checkout'
#       uses: actions/checkout@v3

#     - name: Configure CMake
#       run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: 'ðŸš§ Build FujiNet-PC'
#       run: cmake --build build

#     - name: 'Prepare dist'
#       run: cmake --build build --target=dist

#     - name: Upload build artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: fujinet-pc_macos-10.15
#         path: build/dist/**

#   build-windows:
#     runs-on: windows-latest
#     name: Windows
#     needs: release-prep

#     defaults:
#       run:
#         shell: msys2 {0}

#     steps:
#     - name: 'ðŸ§° Checkout'
#       uses: actions/checkout@v3

#     - name: Setup MSYS2
#       uses: msys2/setup-msys2@v2
#       with:
#         msystem: CLANG64
#         update: true
#         install: >-
#           git
#           base-devel
#         pacboy: >-
#           toolchain:p
#           cmake:p
#           ninja:p
#           libssp:p

#     - name: Uname
#       run: uname -a

#     - name: Show CMake version
#       run: cmake --version

#     - name: Configure CMake
#       run: cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: 'ðŸš§ Build FujiNet-PC'
#       run: cmake --build build

#     - name: 'Prepare dist'
#       run: |
#         cmake --build build --target=dist

#     # Windows runner is pre-installed with some openssl
#     # dist target skippes libssl and libvrypto in /c/Windows/SYSTEM32/
#     - name: 'Update dist with OpenSSL from CLANG64'
#       run: |
#         cp -pv /clang64/bin/libssl-*-x64.dll build/dist
#         cp -pv /clang64/bin/libcrypto-*-x64.dll build/dist

#     - name: 'List dist'
#       working-directory: build/dist
#       run: |
#         ls -la .
#         ldd fujinet.exe

#     - name: Upload build artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: fujinet-pc_windows-x64
#         path: build/dist/**
